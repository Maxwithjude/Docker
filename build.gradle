plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.be'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // ChatGPT API
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter:0.8.1'
    // valid
    implementation 'org.springframework.boot:spring-boot-starter-validation'


    // ⭐ Spring boot 3.x이상에서 QueryDsl 패키지를 정의하는 방법
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // JSOUP (RSS 파싱)
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.18.1'

    // ROME (RSS 파싱)
    implementation group: 'com.rometools', name: 'rome', version: '2.1.0'



    //log4j
//    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
//    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    // HTML 파싱 및 메타데이터 추출에 필요
    // HTML 또는 XML 문서를 파싱해서 DOM 트리로 변환
//    implementation 'org.jsoup:jsoup:1.16.1'

    // JWT를 생성하고 관리하기 위한 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // aws 의존성(S3...)
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //SMTP 이메일을 발송하기 위한 Boot 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    //Redis♥
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

// === ⭐ QueryDsl 빌드 옵션 (선택) ===
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        events "passed", "failed", "skipped"  // 테스트 결과 로깅
    }

    reports {
        junitXml.required.set(true)  // XML 보고서 활성화 (Gradle 최신 문법)
        junitXml.outputLocation.set(file("$buildDir/test-outputs/test"))  // XML 저장 경로
    }
}
